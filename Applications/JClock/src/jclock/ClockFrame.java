/*
 * Copyright (C) 2012 Joseph Areeda <joseph.areeda at ligo.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jclock;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.SimpleTimeZone;
import javax.swing.Timer;
import edu.fullerton.ldvjutils.TimeAndDate;


/**
 *
 * @author Joseph Areeda <joseph.areeda at ligo.org>
 */
public class ClockFrame extends javax.swing.JFrame implements ActionListener
{
    private Font font;
    private FontMetrics fmetric;
    private final Timer updTimer;
    private int speed = 1000;    // how often to update the dialog in ms
    private GregorianCalendar now;
    private boolean showText = true;
    
    // Colors used
    private Color background = Color.white;
    private Color face = Color.BLACK;
    private Color hrHand = Color.BLACK;
    private Color mnHand = Color.BLACK;
    private Color scHand = Color.red;
    private Color txHand = Color.BLACK;
    /**
     * Creates new form ClockFrame
     */
    public ClockFrame()
    {
        initComponents();
        updTimer = new Timer(speed, this);
        updTimer.start();
        GraphicsEnvironment localGraphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] availableFontFamilyNames = localGraphicsEnvironment.getAvailableFontFamilyNames();
        int n=availableFontFamilyNames.length;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        clockMenu = new javax.swing.JPopupMenu();
        toggleTextMI = new javax.swing.JMenuItem();
        quitMI = new javax.swing.JMenuItem();
        facePanel = new javax.swing.JPanel();

        toggleTextMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, 0));
        toggleTextMI.setText("Toggle text");
        toggleTextMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                toggleTextMIActionPerformed(evt);
            }
        });
        clockMenu.add(toggleTextMI);

        quitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, 0));
        quitMI.setText("Quit");
        quitMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitMIActionPerformed(evt);
            }
        });
        clockMenu.add(quitMI);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clock");
        setBackground(new java.awt.Color(45, 40, 205));
        setPreferredSize(new java.awt.Dimension(256, 256));

        facePanel.setBackground(new java.awt.Color(189, 241, 190));
        facePanel.setBorder(new javax.swing.border.MatteBorder(null));
        facePanel.setToolTipText("Right click for options");
        facePanel.setComponentPopupMenu(clockMenu);
        facePanel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                facePanelMouseClicked(evt);
            }
        });
        facePanel.addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                facePanelComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt)
            {
                facePanelComponentShown(evt);
            }
        });
        facePanel.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                facePanelFocusGained(evt);
            }
        });

        javax.swing.GroupLayout facePanelLayout = new javax.swing.GroupLayout(facePanel);
        facePanel.setLayout(facePanelLayout);
        facePanelLayout.setHorizontalGroup(
            facePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 253, Short.MAX_VALUE)
        );
        facePanelLayout.setVerticalGroup(
            facePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(facePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(facePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void facePanelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_facePanelMouseClicked
    {//GEN-HEADEREND:event_facePanelMouseClicked
        draw();
    }//GEN-LAST:event_facePanelMouseClicked

    private void facePanelComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_facePanelComponentResized
    {//GEN-HEADEREND:event_facePanelComponentResized
        draw();
    }//GEN-LAST:event_facePanelComponentResized

    private void facePanelComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_facePanelComponentShown
    {//GEN-HEADEREND:event_facePanelComponentShown
        draw();
    }//GEN-LAST:event_facePanelComponentShown

    private void facePanelFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_facePanelFocusGained
    {//GEN-HEADEREND:event_facePanelFocusGained
        draw();
    }//GEN-LAST:event_facePanelFocusGained

    private void toggleTextMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_toggleTextMIActionPerformed
    {//GEN-HEADEREND:event_toggleTextMIActionPerformed
        showText = ! showText;
        draw();
    }//GEN-LAST:event_toggleTextMIActionPerformed

    private void quitMIActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitMIActionPerformed
    {//GEN-HEADEREND:event_quitMIActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ClockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ClockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ClockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ClockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new ClockFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu clockMenu;
    private javax.swing.JPanel facePanel;
    private javax.swing.JMenuItem quitMI;
    private javax.swing.JMenuItem toggleTextMI;
    // End of variables declaration//GEN-END:variables

    @Override
    public void paint(Graphics g)
    {
        super.paint(g);
        draw();
    }
    private void draw()
    {
        Graphics2D g0 = (Graphics2D) facePanel.getGraphics();
        GraphicsConfiguration gconfig = facePanel.getGraphicsConfiguration();
        
        Rectangle bounds = facePanel.getBounds();
        BufferedImage buf = new BufferedImage(bounds.width, bounds.height, BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D g = buf.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        int cx = bounds.x + bounds.width/2;
        int cy = bounds.y + bounds.height/2;
        int r = Math.round(Math.min(bounds.width/2, bounds.height/2) *.90f);
        
        int fsize = 32;     // font size points
        int hsize = 4;      // second hand stroke width
        int facesz = 5;     // stroke width for outside circle
        if (r < 60)
        {
            hsize = 1;
            fsize = 8;
            facesz = 2;
        }
        else if (r < 100)
        {
            hsize = 1;
            fsize = 9;
            facesz= 2;
        }
        else if (r < 175)
        {
            hsize = 2;
            fsize = 14;
            facesz= 3;
        }
        else if (r < 250)
        {
            hsize = 3;
            fsize = 24;
            facesz= 4;
        }
        font = new Font("times", Font.TRUETYPE_FONT, fsize);
        fmetric = g.getFontMetrics(font);
        r -= fmetric.getHeight();
        g.setFont(font);
        
        g.setColor(background);
        g.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);
        g.setColor(face);
        BasicStroke stroke = new BasicStroke(facesz);
        g.setStroke(stroke);
        g.drawOval(cx-r, cy-r, r*2, r*2);
        drawTics(g,cx,cy,r);
        drawHands(g,cx,cy,r,hsize);
        if (showText)
        {
            addText(g,bounds);
        }
        g0.drawImage(buf, 0, 0, Color.WHITE, this);
    }

    
    private void drawTics(Graphics2D g, int cx, int cy, int r)
    {
        int r1 = Math.round(r * 0.94f);
        int r2 = Math.round(r * 0.86f);
        BasicStroke stroke;
        
        // draw a circle through the center of the hour labels
//        stroke = new BasicStroke(1);
//        g.setStroke(stroke);  
//        g.setColor(Color.gray);
//        g.drawOval(cx-r2, cy-r2, r2*2, r2*2);
        
        int minDiff = fmetric.charWidth('m');
        if (r1-r2 < minDiff)
        {
            r2 = r1 - minDiff;
        }
        
        for(int m=0;m<60;m++)
        {
            double theta = (m*6) * Math.PI / 180. - Math.PI/2;
            double c = Math.cos(theta);
            double s = Math.sin(theta);
            
            // (x0,y0) where tic meets the boundary circle
            int x0 = (int) Math.round(cx + c * (r-1));
            int y0 = (int) Math.round(cy + s * (r-1));

            // (x1,y1) inner limit of tic
            int x1 = (int) Math.round(cx + c * r1);
            int y1 = (int) Math.round(cy + s * r1);

            // (x2,y2) center of the Hour label
            int x2 = (int) Math.round(cx + c * r2);
            int y2 = (int) Math.round(cy + s * r2);

            
            if (m %5 == 0)
            {
                int hr = m/5 % 12;
                
                hr = hr == 0 ? 12 : hr;
                String shr = Integer.toString(hr);
                int fh = fmetric.getAscent() ;
                int fw = fmetric.stringWidth(shr);
                
                int sx = (int) Math.round(x2 - (fw/2 ));
                int sy = (int) Math.round(y2 + (fh/2 ));
                g.drawString(shr, sx, sy);
                
                stroke = new BasicStroke(3);
            }
            else
            {
                stroke = new BasicStroke(1);
            }
            g.setStroke(stroke);
            g.drawLine(x0, y0, x1, y1);
        }
    }

    private void drawHands(Graphics2D g, int cx, int cy, int r,int hsize)
    {
        now = new GregorianCalendar();
        int hr = now.get(Calendar.HOUR_OF_DAY);
        int mn = now.get(Calendar.MINUTE);
        int sc = now.get(Calendar.SECOND);
        
        int r1 = Math.round(r * 0.75f);
        int r2 = Math.round(r * 0.55f);
        
        if (mn == 0 && sc == 0)
        {   // beep twice on the hour once on the half hour
            Sound.playSound("/resources/grandfather_clock.wav");
        }
        if (mn == 30 && sc ==0)
        {
            Sound.playSound("/resources/chime.wav");
        }
        
        double hdeg = ((hr+mn/60.f)*30);
        draw1Hand(hdeg,g,cx,cy,r2,hsize*4,hrHand);
        double mdeg = ((mn + sc/60.f)*6);
        draw1Hand(mdeg,g,cx,cy,r1,hsize*2,mnHand);
        draw1Hand(sc*6,g,cx,cy,r1,hsize,scHand);
        
        g.setColor(Color.red);
        g.drawOval(cx-1, cy-1, 3, 3);
        g.setColor(Color.gray);
        g.drawLine(cx, cy, cx, cy);
    }

    private void draw1Hand(double deg, Graphics2D g, int cx, int cy, int r, int hsize, Color color)
    {
        
        BasicStroke stroke = new BasicStroke(hsize, BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL);
        g.setStroke(stroke);
        g.setColor(color);
        
        double theta = (deg-90) * Math.PI / 180.;
        
        int x = (int) Math.round(cx + Math.cos(theta) * r);
        int y = (int) Math.round(cy + Math.sin(theta) * r);
        g.drawLine(cx, cy, x, y);
    }

    @Override
    public void actionPerformed(ActionEvent ae)
    {
        draw();
    }

    private void addText(Graphics2D g,Rectangle bounds)
    {
        
        SimpleTimeZone utctz = new SimpleTimeZone(0, "UTC");
        SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat time = new SimpleDateFormat("zzz: HH:mm:ss");
        String dateStr = date.format(now.getTime());
        String local = time.format(now.getTime());
        time.setTimeZone(utctz);
        String utc = time.format(now.getTime());
        
        g.setColor(Color.BLACK);
        int top = Math.round(fmetric.getHeight());
        int spacer = fmetric.charWidth(' ');
        int left = spacer;
        g.drawString(utc, left, top);
        int bot = Math.round(bounds.y + bounds.height - fmetric.getDescent());
        g.drawString(dateStr, left, bot);
        int right = Math.round(bounds.x + bounds.width - fmetric.stringWidth(local) - spacer);
        g.drawString(local, right, top);
        long gps = TimeAndDate.utc2gps(now.getTimeInMillis()/1000);
        String gpsStr = String.format("GPS:%1$,d", gps);
        int right2 = Math.round(bounds.x + bounds.width - fmetric.stringWidth(gpsStr) - spacer);
        g.drawString(gpsStr,right2,bot);
    }
}
