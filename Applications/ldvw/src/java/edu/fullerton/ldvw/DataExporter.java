/*
 * Copyright (C) 2012 Joseph Areeda <joseph.areeda at ligo.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.fullerton.ldvw;

import com.ritolaaudio.simplewavio.Utils;
import viewerplugin.ChanDataBuffer;
import edu.fullerton.jspWebUtils.Page;
import edu.fullerton.jspWebUtils.WebUtilException;
import edu.fullerton.ldvjutils.ChanInfo;
import edu.fullerton.ldvjutils.LdvTableException;
import edu.fullerton.ldvjutils.TimeInterval;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.SimpleTimeZone;
import javax.servlet.http.HttpServletResponse;

/**
 * Export a list of ChanDataBuffer objects for import into LigoDV
 * 
 * @author Joseph Areeda <joseph.areeda at ligo.org>
 */
class DataExporter
{

    private final String mimeType = "application/mfile";
    private final HttpServletResponse response;
    private final Page vpage;
    
    private StringBuilder mainFn;       // Matlab code for our top code
    private StringBuilder dataFns;      // Matlab code to create data arrays
    
    
    DataExporter(HttpServletResponse response, Page vpage)
    {
        this.response = response;
        this.vpage = vpage;
    }

    /**
     * Export data selected for importing into LigoDV
     * @param bufList selected and downloaded buffers
     * @return true if caller should send hmtl (error message) false if we sent a file
     * @throws IOException 
     */
    boolean sendMfile(ArrayList<ChanDataBuffer> bufList) throws IOException, LdvTableException
    {
        boolean ret = false;
        mainFn = new StringBuilder();
        dataFns = new StringBuilder();
        
        mainFn.append(getTopComment());
        String fnName = "ldvw_export_" + nowAsUtcString();
        getMainFn(bufList,fnName);
        mainFn.append(dataFns);


        response.setContentType(mimeType);
        response.setHeader("content-disposition", "attachment; filename=\"" +fnName +".m\"");

        response.setContentLength(mainFn.length());
        response.getWriter().append(mainFn.toString());

        return ret;
    }
    
    private String getTopComment()
    {
        String ret = "%  This file was generated by LigoDV-web.\n"
                + "%  It is meant to be used by LigoDV's Import from ldvw command.\n"
                + "%  It relies upon Classes and Functions that are part of LigoDV v1,14+ so it is\n"
                + "%  not meant to use outside of LigoDV\n"
                + "%  See https://ldvw.ligo.caltech.edu/dokuwiki/doku.php?id=ldvwexport2ldv\n"
                + "\n"
        ;
        
        return ret;
    }
    
    private void getMainFn(ArrayList<ChanDataBuffer> bufList,String fnName) throws LdvTableException
    {
        
        mainFn.append("function newobjs = ").append(fnName).append("()\n"
                + "%LDVW_EXPORT create the objects structure for addition to the LigoDV Data Pool\n"
                + "% detailed description to be written\n\n");
        
        int n = bufList.size();
        
        mainFn.append(String.format("    newobjs.nobjs = %d;\n",n));
        
        for(int i=0;i<n;i++)
        {
            ChanDataBuffer buf = bufList.get(i);
            ChanInfo chanInfo = buf.getChanInfo();
            TimeInterval timeInterval = buf.getTimeInterval();
            
            String cName = chanInfo.getChanName();
            String cType = chanInfo.getcType();
            String server = chanInfo.getServer();
            float fs = chanInfo.getRate();
            Long startgps = timeInterval.getStartGps();
            Long stopgps = timeInterval.getStopGps();
            
            String comment = buf.toString(); 
            mainFn.append("    % ").append(comment).append("\n");
            mainFn.append("    obj = DataObject();\n");
            mainFn.append("    obj.setChanName('").append(cName).append(",").append(cType).append("');\n");
            mainFn.append("    obj.setServer('").append(server).append("');\n");
            mainFn.append("    obj.setFs(");
            if (fs >=1)
            {
                mainFn.append(String.format("%1$.0f", fs));
            }
            else if (fs > .016)
            {
                mainFn.append("1/60");
            }
            else
            {
                mainFn.append(String.format("%1$.5f", fs));
            }
            mainFn.append(");\n");
            
            mainFn.append("    obj.setStart(").append(String.format("%1$d",startgps)).append(");\n");
            mainFn.append("    obj.setStop(").append(String.format("%1$d", stopgps)).append(");\n");
            
            String funcName = String.format("getMyData%1$02d",i);
            mainFn.append("    x = ").append(funcName).append(";\n");
            mainFn.append("    obj.setX(x);\n");
            mainFn.append("    newobj = obj.getDataPoolObj();\n");
            mainFn.append(String.format("    newobjs.objs(%1$d) = newobj;\n",i+1));
            mainFn.append("  %----\n\n");
            
            addDataFn(buf,funcName);
        }
        mainFn.append("end\n\n");
        

    }
    private void addDataFn(ChanDataBuffer dbuf,String funcName)
    {
        
        dataFns.append("function data = ").append(funcName).append("()\n\n");
        dataFns.append("    data=[...\n");
        double[] data = dbuf.getDblData();
        int linCnt = 8;
        for (int lidx = 0; lidx < data.length; lidx += linCnt)
        {
            dataFns.append("        ");
            for (int idx = lidx; idx < lidx + linCnt && idx < data.length; idx++)
            {
                dataFns.append(Double.toString(data[idx]));
                if (idx < data.length - 1)
                {
                    dataFns.append("; ");
                }
            }
            dataFns.append("...\n");
        }
        dataFns.append("    ];\nend\n");
    }
    private String nowAsUtcString()
    {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
        SimpleTimeZone utctz = new SimpleTimeZone(0, "UTC");
        GregorianCalendar now = new GregorianCalendar(utctz);

        sdf.setTimeZone(utctz);
        String ret = sdf.format(now.getTime());
        return ret;
    }

    boolean sendCSVfile(ArrayList<ChanDataBuffer> bufList) throws IOException, LdvTableException
    {
        ChanDataBuffer buf = bufList.get(0);
        ChanInfo chanInfo = buf.getChanInfo();
        TimeInterval timeInterval = buf.getTimeInterval();

        double[] data = buf.getDblData();
        float fs = chanInfo.getRate();
        Long startgps = timeInterval.getStartGps();
        
        String fnName = buf.getChanInfo().getChanName() + "_" +
                        Long.toString(buf.getTimeInterval().getStartGps()) +
                        Long.toString(buf.getTimeInterval().getDuration());
        response.setContentType("text/csv");
        response.setHeader("content-disposition", "attachment; filename=\"" + fnName + ".csv\"");

        PrintWriter writer = response.getWriter();

        double t;
        int n = data.length;
        String oline;
        for (int x = 0; x < n; x++)
        {
            t = x / fs;
            t += startgps;
            writer.append(String.format("%1$25.6f, %2$25.16G\n", t, data[x]));
        }
        return false;
    }

    boolean sendXMLfile(ArrayList<ChanDataBuffer> bufList)
    {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    boolean sendWAVfile(ArrayList<ChanDataBuffer> bufList) throws IOException, WebUtilException, LdvTableException
    {
        boolean ret = false;
        ChanDataBuffer buf = bufList.get(0);
        ChanInfo chanInfo = buf.getChanInfo();
        TimeInterval timeInterval = buf.getTimeInterval();

        float[] data = buf.getData();
        float fs = chanInfo.getRate();
        fs = Math.max(1024.f, fs);
        float[][] samples = new float[data.length][1];
        float smin = Float.MAX_VALUE;
        float smax = Float.MIN_VALUE;
        for (int i = 0; i < data.length; i++)
        {
            float s = data[i];
            smin = Math.min(smin, s);
            smax = Math.max(smax,s);
        }
        if (smax-smin == 0)
        {
            throw new WebUtilException("All values are a constant so no sound.");
        }
        else
        {
            float fact= 2 / (smax-smin);
            for(int i=0;i<data.length;i++)
            {
                samples[i][0] = (data[i]-smin)*fact - 1;
            }
            File out = File.createTempFile("ldvw", ".wav",new File("/tmp"));
            try
            {
                Utils.floatsToWAV(samples, out, (int) fs);

                response.setContentType("audio/x-wav");
                response.setHeader("content-disposition", "attachment; filename=\"ldvw.wav\"");

                response.setContentLength((int)out.length());

                FileInputStream is = new FileInputStream(out);
                OutputStream os=response.getOutputStream();

                byte[] rbuf = new byte[1000];
                for (int nChunk = is.read(rbuf); nChunk != -1; nChunk = is.read(rbuf))
                {
                    os.write(rbuf, 0, nChunk);
                }
            }
            catch (IOException ex)
            {
                throw new WebUtilException("Error writing wav file" );
            }
        }        
        return ret;
    }
}
