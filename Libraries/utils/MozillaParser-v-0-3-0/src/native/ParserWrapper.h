#include <stdint.h>

#include "nsICharsetConverterManager.h"

#ifndef _PARSERWRAPPER_H_
#define _PARSERWRAPPER_H_

class ParserWrapper
{
public:
	ParserWrapper();
	~ParserWrapper();

	/**
	 * Perform initialization.  This must be called exactly once during the
	 * lifetime of the object.
	 *
	 * @return 0 on success; 1 on failure (see getLastErrorMessage())
	 */
	int init();

	/**
	 * Set the content sink to be used by the parser
	 */
	void setContentSink( nsCOMPtr<JavaContentSink> contentSink );

	/**
	 * Set the encoding used by the parser.  The default encoding is
	 * ISO-8859-1, unless it is either specified via setEncoding() or by a META
	 * tag in the HTML body.
	 *
	 * @param encoding The name of the encoding (as an ASCII string)
	 * @param allowOverride If true, allow a <META> tag to override this
	 * encoding.
	 */
	void setEncoding( const char *encoding, bool allowOverride );

	/**
	 * Parse an HTML stream.
	 *
	 * @param htmlBytes the array of bytes to parse
	 * @param htmlNumBytes The length of the byte array
	 *
	 * @return 0 on success; 1 on failure (see getLastErrorMessage())
	 */
	int parse( const char *htmlBytes, uint32_t htmlNumBytes );

	/**
	 * Get the last error message generated by the init() or parse() methods.
	 * This method should only be called if one of those methods returned a
	 * non-zero value.
	 */
	const char *getLastErrorMessage();

protected:
	int _parse( const char *htmlBytes, uint32_t htmlNumBytes );
	int _setErrorMessage( const char *fmt, ... );
	char *_errorMessage;

	nsCOMPtr<JavaContentSink> contentSink;

	nsIUnicodeDecoder *decoder;
	nsCAutoString charset;
	PRUint32 charsetSource;

	nsIUnicodeDecoder *defaultDecoder;
	const char *const defaultCharset;
	const PRUint32 defaultCharsetSource;

	nsCOMPtr<nsICharsetConverterManager> ccm;
};

#endif // _PARSERWRAPPER_H_
