package com.web_tomorrow.utils.datetime;
import java.util.*;
import java.io.*;

/**
This class builds the class com.web_tomorrow.utils.datetime.LatLongData by
inspecting a Linux zone.tab file (whose name can be specified on the
command line). This class should only be executed on Linux/Unix machines
with a zone.tab. The suntimes/datetime package as distributed will
compile without this, as it will use a version generated by the author
and included in the distribution. The only reason to run this is if
you suspect that you have a more up-to-date zone.tab

(c)2001 Kevin Boone/Wwb-Tomorrow
*/
public class MakeLatLong
{
public static void main (String[] args) throws Exception
  {
  String zonefile;
  if (args.length >= 1)
    zonefile = args[1];
  else
    zonefile = "/usr/share/zoneinfo/zone.tab";
  System.out.println ("Using zone.tab in " + zonefile);

  String classfile = "com/web_tomorrow/utils/datetime/LatLongData.java";

  System.out.println ("Writing class source in " + classfile);
  PrintWriter out = new PrintWriter (new FileOutputStream (new File (classfile)));

  // Writer header of class file
  out.println ("// This file is automatically-generated. Do not edit");
  out.println ("package com.web_tomorrow.utils.datetime;");
  out.println ("class LatLongData {");
  out.println ("static LatLongDataElement[] elements = {");

  File f = new File (zonefile);
  FileInputStream fis = new FileInputStream (f);
  InputStreamReader isr = new InputStreamReader (fis);
  BufferedReader in = new BufferedReader (isr);
  Vector v = new Vector();
  String line;
  while ((line = in.readLine()) != null)
    {
    LatLongDataElement llt = parseLine (line);
    if (llt != null)
      {
      v.add (llt);
      } 
    }

  Collections.sort (v);

  for (int i = 0; i < v.size(); i++)
    {
    String comma = (i == v.size() - 1) ? "" : ",";
    LatLongDataElement llt = (LatLongDataElement)v.elementAt (i);
    out.println ("new LatLongDataElement(\"" + llt.id + "\", " + llt.posLat + "," + llt.dLat + "," + llt.mLat + "," + llt.sLat + "," + llt.posLong + ", " + llt.dLong + "," + llt.mLong + "," + llt.sLong +  ")" + comma);
   } 

  out.println ("};");
  out.println ("}");
  out.close();
  }

public static LatLongDataElement parseLine (String s)
  {
  if (s == null) return null;
  if (s.length() == 0) return null;
  if (s.charAt(0) == '#') return null;
  StringTokenizer st = new StringTokenizer (s, "\t");
  if (st.countTokens() < 3)
    {
    System.err.println ("Rejected line because it has less than three tokens: " + s);
    return null;
    }
  String dummy = st.nextToken();
  String latlongdata = st.nextToken();
  String id = st.nextToken();

  String latpart = null;
  String longpart = null;
  
  if (latlongdata.length() == 11) // short form
    {
    latpart = latlongdata.substring (0, 5);
    longpart = latlongdata.substring (5, 5+6);
    }
  else if (latlongdata.length() == 15) // long form
    {
    latpart = latlongdata.substring (0, 7);
    longpart = latlongdata.substring (7, 7+8);
    }
  else
    {
    System.err.println ("Rejected line because it has neither 11 nor 15 chars in latlong data: " + s);
    return null;
    }

  LatLongDataElement llt = new LatLongDataElement();
  llt.id = id;
  parseLat(latpart, llt);
  parseLongt(longpart, llt);
  return llt; 
  }

private static void parseLat (String s, LatLongDataElement llt)
  {
  boolean pos = false;
  if (s.charAt(0) == '+')
    pos = true;

  s = s.substring (1);
  String degpart = null;
  String minpart = null;
  String secpart = null;
  if (s.length() == 4)
    {
    degpart = s.substring (0, 2);
    minpart = s.substring (2, 2+2);
    secpart = null;
    }
  else if (s.length() == 6)
    {
    degpart = s.substring (0, 2);
    minpart = s.substring (2, 2+2);
    secpart = s.substring (2+2, 2+2+2);
    }
  else 
    {
    System.err.println ("OOPS"); 
    System.exit (-1); // Should never happen
    }

  int deg = Integer.parseInt (degpart);
  int min = Integer.parseInt (minpart);
  int sec = 0;
  if (secpart != null) 
    sec = Integer.parseInt (secpart);
  llt.dLat = deg;
  llt.mLat = min;
  llt.sLat = sec;
  llt.posLat = pos;
  }

private static void parseLongt (String s, LatLongDataElement llt)
  {
  boolean pos = false;
  if (s.charAt(0) == '+')
    pos = true;

  s = s.substring (1);
  String degpart = null;
  String minpart = null;
  String secpart = null;
  if (s.length() == 5)
    {
    degpart = s.substring (0, 3);
    minpart = s.substring (3, 3+2);
    secpart = null;
    }
  else if (s.length() == 7)
    {
    degpart = s.substring (0, 3);
    minpart = s.substring (3, 3+2);
    secpart = s.substring (3+2, 3+2+2);
    }
  else 
    {
    System.err.println ("OOPS"); 
    System.exit (-1); // Should never happen
    }

  int deg = Integer.parseInt (degpart);
  int min = Integer.parseInt (minpart);
  int sec = 0;
  if (secpart != null) 
    sec = Integer.parseInt (secpart);
  llt.dLong = deg; 
  llt.mLong = min;
  llt.sLong = sec;
  llt.posLong = pos;
  }
}



